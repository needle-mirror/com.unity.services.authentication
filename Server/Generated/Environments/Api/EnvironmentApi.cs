
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Unity.Services.Authentication.Server.Shared;

namespace Unity.Services.Authentication.Server.Environments.Generated
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IEnvironmentApi : IApiAccessor
    {
        /// <summary>
        /// Create an Environment
        /// </summary>
        /// <remarks>
        /// Create an environment under a project.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvironmentResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvironmentResponse>> CreateEnvironmentAsync(string projectId, EnvironmentRequestBody environmentRequestBody = default(EnvironmentRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Environment
        /// </summary>
        /// <remarks>
        /// Delete an existing environment
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEnvironmentAsync(string projectId, string environmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an Environment
        /// </summary>
        /// <remarks>
        /// Get a single environment
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvironmentResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvironmentResponse>> GetEnvironmentAsync(string projectId, string environmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Environments
        /// </summary>
        /// <remarks>
        /// List all the environments for a project
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListEnvironmentsResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<ListEnvironmentsResponse>> GetEnvironmentsAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class EnvironmentApi : IEnvironmentApi
    {        
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IApiClient Client { get; }
        
        /// <summary>
        /// Gets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IApiConfiguration Configuration { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="apiClient">The client interface for synchronous API access.</param>
        public EnvironmentApi(IApiClient apiClient)
        {      
            if (apiClient == null) throw new ArgumentNullException("apiClient");

            this.Client = apiClient;
            this.Configuration = new ApiConfiguration()
            {
                BasePath = "https://services.api.unity.com"
            };
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="apiClient">The client interface for synchronous API access.</param>
        /// <param name="apiConfiguration">The configuration object.</param>
        public EnvironmentApi(IApiClient apiClient, IApiConfiguration apiConfiguration)
        {      
            if (apiClient == null) throw new ArgumentNullException("apiClient");
            if (apiConfiguration == null) throw new ArgumentNullException("apiConfiguration");

            this.Client = apiClient;
            this.Configuration = apiConfiguration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <returns>The base path</returns>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Create an Environment Create an environment under a project.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvironmentResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvironmentResponse>> CreateEnvironmentAsync(string projectId, EnvironmentRequestBody environmentRequestBody = default(EnvironmentRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new ApiException(ApiExceptionType.InvalidParameters, "Missing required parameter 'projectId' when calling EnvironmentApi->CreateEnvironment");
            }

            ApiRequestOptions localRequestOptions = new ApiRequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localContentType = ApiUtils.SelectHeaderContentType(_contentTypes);
            if (localContentType != null)
            {
                localRequestOptions.HeaderParameters.Add("Content-Type", localContentType);
            }

            var localAccept = ApiUtils.SelectHeaderAccept(_accepts);
            if (localAccept != null)
            {
                localRequestOptions.HeaderParameters.Add("Accept", localAccept);
            }

            localRequestOptions.PathParameters.Add("projectId", ApiUtils.ParameterToString(Configuration, projectId)); // path parameter
            localRequestOptions.Data = environmentRequestBody;

            localRequestOptions.Operation = "EnvironmentApi.CreateEnvironment";

            // authentication (ServiceAccount) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ApiUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            return await this.Client.PostAsync<EnvironmentResponse>("/unity/v1/projects/{projectId}/environments", localRequestOptions, this.Configuration, cancellationToken);
        }
        /// <summary>
        /// Delete an Environment Delete an existing environment
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEnvironmentAsync(string projectId, string environmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new ApiException(ApiExceptionType.InvalidParameters, "Missing required parameter 'projectId' when calling EnvironmentApi->DeleteEnvironment");
            }
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
            {
                throw new ApiException(ApiExceptionType.InvalidParameters, "Missing required parameter 'environmentId' when calling EnvironmentApi->DeleteEnvironment");
            }

            ApiRequestOptions localRequestOptions = new ApiRequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localContentType = ApiUtils.SelectHeaderContentType(_contentTypes);
            if (localContentType != null)
            {
                localRequestOptions.HeaderParameters.Add("Content-Type", localContentType);
            }

            var localAccept = ApiUtils.SelectHeaderAccept(_accepts);
            if (localAccept != null)
            {
                localRequestOptions.HeaderParameters.Add("Accept", localAccept);
            }

            localRequestOptions.PathParameters.Add("projectId", ApiUtils.ParameterToString(Configuration, projectId)); // path parameter
            localRequestOptions.PathParameters.Add("environmentId", ApiUtils.ParameterToString(Configuration, environmentId)); // path parameter

            localRequestOptions.Operation = "EnvironmentApi.DeleteEnvironment";

            // authentication (ServiceAccount) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ApiUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            return await this.Client.DeleteAsync<Object>("/unity/v1/projects/{projectId}/environments/{environmentId}", localRequestOptions, this.Configuration, cancellationToken);
        }
        /// <summary>
        /// Get an Environment Get a single environment
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvironmentResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvironmentResponse>> GetEnvironmentAsync(string projectId, string environmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new ApiException(ApiExceptionType.InvalidParameters, "Missing required parameter 'projectId' when calling EnvironmentApi->GetEnvironment");
            }
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
            {
                throw new ApiException(ApiExceptionType.InvalidParameters, "Missing required parameter 'environmentId' when calling EnvironmentApi->GetEnvironment");
            }

            ApiRequestOptions localRequestOptions = new ApiRequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localContentType = ApiUtils.SelectHeaderContentType(_contentTypes);
            if (localContentType != null)
            {
                localRequestOptions.HeaderParameters.Add("Content-Type", localContentType);
            }

            var localAccept = ApiUtils.SelectHeaderAccept(_accepts);
            if (localAccept != null)
            {
                localRequestOptions.HeaderParameters.Add("Accept", localAccept);
            }

            localRequestOptions.PathParameters.Add("projectId", ApiUtils.ParameterToString(Configuration, projectId)); // path parameter
            localRequestOptions.PathParameters.Add("environmentId", ApiUtils.ParameterToString(Configuration, environmentId)); // path parameter

            localRequestOptions.Operation = "EnvironmentApi.GetEnvironment";

            // authentication (ServiceAccount) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ApiUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            return await this.Client.GetAsync<EnvironmentResponse>("/unity/v1/projects/{projectId}/environments/{environmentId}", localRequestOptions, this.Configuration, cancellationToken);
        }
        /// <summary>
        /// List Environments List all the environments for a project
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListEnvironmentsResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListEnvironmentsResponse>> GetEnvironmentsAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new ApiException(ApiExceptionType.InvalidParameters, "Missing required parameter 'projectId' when calling EnvironmentApi->GetEnvironments");
            }

            ApiRequestOptions localRequestOptions = new ApiRequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localContentType = ApiUtils.SelectHeaderContentType(_contentTypes);
            if (localContentType != null)
            {
                localRequestOptions.HeaderParameters.Add("Content-Type", localContentType);
            }

            var localAccept = ApiUtils.SelectHeaderAccept(_accepts);
            if (localAccept != null)
            {
                localRequestOptions.HeaderParameters.Add("Accept", localAccept);
            }

            localRequestOptions.PathParameters.Add("projectId", ApiUtils.ParameterToString(Configuration, projectId)); // path parameter

            localRequestOptions.Operation = "EnvironmentApi.GetEnvironments";

            // authentication (ServiceAccount) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ApiUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            return await this.Client.GetAsync<ListEnvironmentsResponse>("/unity/v1/projects/{projectId}/environments", localRequestOptions, this.Configuration, cancellationToken);
        }
    }
}
