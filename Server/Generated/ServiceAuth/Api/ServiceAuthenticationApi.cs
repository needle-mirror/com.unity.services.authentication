
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Unity.Services.Authentication.Server.Shared;

namespace Unity.Services.Authentication.Server.ServiceAuth.Generated
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IServiceAuthenticationApi : IApiAccessor
    {
        /// <summary>
        /// Token Exchange API
        /// </summary>
        /// <remarks>
        /// Exchange a Service Account Key ID and Secret Key pair to a Stateless Access Token. The access token is always scoped to a project and optionally even to an environment. Following the principle of least privilege it is a good practice to scope the token to both project and environment ID if applicable. &lt;br/&gt;&lt;br/&gt; The request can optionally contain a list of permissions that should be scoped to the access token. If left out then all scopes will be included by default. &lt;br/&gt;&lt;br/&gt; The returned access token is a standard [RFC 7519 JWT](https://www.rfc-editor.org/rfc/rfc7519) &lt;br /&gt;&lt;br /&gt; The Token Exchange API has a maximum limit of 100 permissions that can be included in the Stateless Access Token. Because all permissions are included by default this cap can be hit when no &#x60;scopes&#x60; are being specified in the request. This might happen if the Service Account has been assigned multiple roles that each grant their own permissions. If the permission cap is reached the API will return an error. In this case it&#39;s required to specify the exact permissions that the Stateless Access Token should have when using the exchange API. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID for Unity project that the access token is scoped to.</param>
        /// <param name="environmentId">Id of an environment that the access token is scoped to. (optional)</param>
        /// <param name="exchangeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExchangeResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<ExchangeResponse>> ExchangeToStatelessAsync(string projectId, string environmentId = default(string), ExchangeRequest exchangeRequest = default(ExchangeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class ServiceAuthenticationApi : IServiceAuthenticationApi
    {        
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IApiClient Client { get; }
        
        /// <summary>
        /// Gets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IApiConfiguration Configuration { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceAuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="apiClient">The client interface for synchronous API access.</param>
        public ServiceAuthenticationApi(IApiClient apiClient)
        {      
            if (apiClient == null) throw new ArgumentNullException("apiClient");

            this.Client = apiClient;
            this.Configuration = new ApiConfiguration()
            {
                BasePath = "https://services.api.unity.com"
            };
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceAuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="apiClient">The client interface for synchronous API access.</param>
        /// <param name="apiConfiguration">The configuration object.</param>
        public ServiceAuthenticationApi(IApiClient apiClient, IApiConfiguration apiConfiguration)
        {      
            if (apiClient == null) throw new ArgumentNullException("apiClient");
            if (apiConfiguration == null) throw new ArgumentNullException("apiConfiguration");

            this.Client = apiClient;
            this.Configuration = apiConfiguration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <returns>The base path</returns>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Token Exchange API Exchange a Service Account Key ID and Secret Key pair to a Stateless Access Token. The access token is always scoped to a project and optionally even to an environment. Following the principle of least privilege it is a good practice to scope the token to both project and environment ID if applicable. &lt;br/&gt;&lt;br/&gt; The request can optionally contain a list of permissions that should be scoped to the access token. If left out then all scopes will be included by default. &lt;br/&gt;&lt;br/&gt; The returned access token is a standard [RFC 7519 JWT](https://www.rfc-editor.org/rfc/rfc7519) &lt;br /&gt;&lt;br /&gt; The Token Exchange API has a maximum limit of 100 permissions that can be included in the Stateless Access Token. Because all permissions are included by default this cap can be hit when no &#x60;scopes&#x60; are being specified in the request. This might happen if the Service Account has been assigned multiple roles that each grant their own permissions. If the permission cap is reached the API will return an error. In this case it&#39;s required to specify the exact permissions that the Stateless Access Token should have when using the exchange API. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">ID for Unity project that the access token is scoped to.</param>
        /// <param name="environmentId">Id of an environment that the access token is scoped to. (optional)</param>
        /// <param name="exchangeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExchangeResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExchangeResponse>> ExchangeToStatelessAsync(string projectId, string environmentId = default(string), ExchangeRequest exchangeRequest = default(ExchangeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new ApiException(ApiExceptionType.InvalidParameters, "Missing required parameter 'projectId' when calling ServiceAuthenticationApi->ExchangeToStateless");
            }

            ApiRequestOptions localRequestOptions = new ApiRequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localContentType = ApiUtils.SelectHeaderContentType(_contentTypes);
            if (localContentType != null)
            {
                localRequestOptions.HeaderParameters.Add("Content-Type", localContentType);
            }

            var localAccept = ApiUtils.SelectHeaderAccept(_accepts);
            if (localAccept != null)
            {
                localRequestOptions.HeaderParameters.Add("Accept", localAccept);
            }

            localRequestOptions.QueryParameters.Add(ApiUtils.ParameterToMultiMap(Configuration, "", "projectId", projectId));
            if (environmentId != null)
            {
                localRequestOptions.QueryParameters.Add(ApiUtils.ParameterToMultiMap(Configuration, "", "environmentId", environmentId));
            }
            localRequestOptions.Data = exchangeRequest;

            localRequestOptions.Operation = "ServiceAuthenticationApi.ExchangeToStateless";

            // authentication (ServiceAccount) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ApiUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            return await this.Client.PostAsync<ExchangeResponse>("/auth/v1/token-exchange", localRequestOptions, this.Configuration, cancellationToken);
        }
    }
}
